apiVersion: platform.confluent.io/v1beta1
kind: Connector
metadata:
  name: pdns-tshark-s3
  labels:
    ***REMOVED***.uk/function: ingress
spec:
  class: "io.confluent.connect.s3.source.S3SourceConnector"
  taskMax: 2
  connectClusterRef:
    name: connect
  configs:
    aws.access.key.id: "test"
    aws.secret.access.key: "test"
    format.class: "io.confluent.connect.s3.format.json.JsonFormat"
    mode: "GENERIC"
    s3.bucket.name: "raw-bucket"
    s3.region: "us-east-1"
    store.url: "http://localstack-localstack.localstack:4566"
    task.batch.size: "1"
    topic.regex.list: "tshark.ingress.responses.dns.customer.***REMOVED***.uk:.*"
    topics.dir: "json"
    value.converter: "org.apache.kafka.connect.json.JsonConverter"
    value.converter.schemas.enable: "false"
    record.batch.max.size: "10000"
    s3.poll.interval.ms: "1000"
  restartPolicy:
    type: OnFailure
# ---
# apiVersion: platform.confluent.io/v1beta1
# kind: Connector
# metadata:
#   name: pdns-elasticsearch # currently not working until TLS resolved
#   labels:
#     ***REMOVED***.uk/function: egress
# spec:
#   class: "io.confluent.connect.elasticsearch.ElasticsearchSinkConnector"
#   taskMax: 1
#   connectClusterRef:
#     name: connect
#   configs:
#     connection.url: https://kafka-connect-elasticsearch:9200
#   restartPolicy:
#     type: OnFailure
# ---
# apiVersion: platform.confluent.io/v1beta1
# kind: Connector
# metadata:
#   name: redpanda
#   labels:
#     ***REMOVED***.uk/function: replication
# spec:
#   class: "org.apache.kafka.connect.mirror.MirrorSourceConnector"
#   taskMax: 1
#   configs:
#     topics: "raw"
#     target.cluster.bootstrap.servers: "redpanda:9092"
#     source.cluster.bootstrap.servers: "kafka:9092"
#     source.cluster.alias: "self"